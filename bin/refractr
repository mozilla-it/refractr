#!/usr/bin/env python3
import os
import sys

from argparse import ArgumentParser
from jinja2 import Environment, FileSystemLoader
from leatherman.yaml import yaml_print
from leatherman.dbg import dbg

DIR = os.path.abspath(os.path.dirname(__file__) + "/..")
CWD = os.path.abspath(os.getcwd())
REL = os.path.relpath(DIR, CWD)
SRC = f"{DIR}/refractr"
REFRACTR = f'{REL}/refractr'
REFRACTR_YML = f'{REFRACTR}/refractr.yml'
INGRESS_YAML_TEMPLATE = f'{REFRACTR}/ingress.yaml.template'

sys.path.insert(0, SRC)

from refractr import load_refractr

def main(args):
    parser = ArgumentParser()
    parser.add_argument(
        "-c",
        "--config",
        metavar="CFG",
        default=REFRACTR_YML,
        help='default="%(default)s"; specify the config yaml to use',
    )
    parser.add_argument(
        '-l',
        '--load-only',
        action='store_true',
        help='default="%(default)s"; toggle load-only option'
    )
    parser.add_argument(
        '-v',
        '--validate-only',
        action='store_true',
        help='default="%(default)s"; toggle validate-only option'
    )
    parser.add_argument(
        '-i',
        '--ingress-template',
        metavar='FILE',
        const=INGRESS_YAML_TEMPLATE,
        nargs='?',
        help='const="%(const)s"; toggle creating ingress.yml from template'
    )
    parser.add_argument(
        "refractr_pns",
        nargs="*",
        default=["*"],
        help='default="%(default)s"; patterns to limit refracts',
    )
    ns = parser.parse_args(args)
    refractr = load_refractr(**ns.__dict__)
    if ns.validate_only:
        yaml_print(refractr.validate())
    elif ns.load_only:
        print(refractr)
    elif ns.ingress_template:
        domains = refractr.domains()
        env = Environment(
            loader=FileSystemLoader(os.path.dirname(ns.ingress_template)),
            trim_blocks=True,
            lstrip_blocks=True)
        template = env.get_template(os.path.basename(ns.ingress_template))
        ingress = template.render(domains)
        print(ingress)
    else:
        print(refractr.render())

if __name__ == '__main__':
    main(sys.argv[1:])
