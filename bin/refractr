#!/usr/bin/env python3
'''
refractr
'''

import os
import sys
sys.dont_write_bytecode = True

from argparse import ArgumentParser
from jinja2 import Environment, FileSystemLoader
from leatherman.dbg import dbg

DIR = os.path.abspath(os.path.dirname(__file__) + "/..")
CWD = os.path.abspath(os.getcwd())
REL = os.path.relpath(DIR, CWD)
SRC = f"{DIR}/refractr"
REFRACTR = f'{REL}/refractr'
REFRACTR_YML = f'{REFRACTR}/refractr.yml'
INGRESS_YAML_TEMPLATE = f'{REFRACTR}/ingress.yaml.template'

sys.path.insert(0, DIR)

from refractr.generate import load_refractr
from refractr.validate import RefractrValidator

def add_subparser(subparsers, action, **kwargs):
    parser = subparsers.add_parser(action, **kwargs)
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='turn up verbosity'
    )
    parser.add_argument(
        "refractr_pns",
        nargs="*",
        default=["*"],
        help='default="%(default)s"; patterns to limit refracts',
    )
    return parser

def main(args):
    main_parser = ArgumentParser(description=__doc__)
    main_parser.add_argument(
        "-c",
        "--config",
        metavar="CFG",
        default=REFRACTR_YML,
        help='default="%(default)s"; specify the config yaml to use',
    )
    subparsers = main_parser.add_subparsers(
        dest='action',
        title='action',
        help='actions')
    load_parser = add_subparser(
        subparsers,
        'show',
        aliases=['sh'],
        help='show data transformed by loading')
    nginx_parser = add_subparser(
        subparsers,
        'nginx',
        aliases=['ngx'],
        help='generate nginx')
    ingress_parser = add_subparser(
        subparsers,
        'ingress',
        aliases=['ing'],
        help='generate ingress')
    ingress_parser.add_argument(
        '-i', '--ingress-template',
        metavar='FILE',
        default=INGRESS_YAML_TEMPLATE,
        nargs='?',
        help='default="%(default)s"; path to ingress template'
    )
    validate_parser = add_subparser(
        subparsers,
        'validate',
        aliases=['val'],
        help='validate refracts public|stage|localhost'
    )
    validate_parser.add_argument(
        '-n', '--netloc',
        nargs='?',
        const='localhost:80',
        help='default="public"; const="%(const)s"; select netloc to use'
    )
    ns = main_parser.parse_args(args)
    refractr = load_refractr(**ns.__dict__)

    if ns.action in ('val', 'validate'):
        validator = RefractrValidator(netloc=ns.netloc, verbose=ns.verbose)
        refractr = validator.validate(refractr)
        print(refractr)
    elif ns.action in ('sh', 'show'):
        print(refractr)
    elif ns.action in ('ing', 'ingress'):
        domains = refractr.domains()
        env = Environment(
            loader=FileSystemLoader(os.path.dirname(ns.ingress_template)),
            trim_blocks=True,
            lstrip_blocks=True)
        template = env.get_template(os.path.basename(ns.ingress_template))
        ingress = template.render(domains)
        print(ingress)
    elif ns.action in ('ngx', 'nginx'):
        print(refractr.render())
    else:
        raise Exception(f'should not happen: {ns.action}')

if __name__ == '__main__':
    main(sys.argv[1:])
