#!/usr/bin/env python3
"""
refractr
"""

import os
import sys

sys.dont_write_bytecode = True

from argparse import ArgumentParser
from json import dumps as json_dumps

from jinja2 import Environment, FileSystemLoader
from leatherman.dbg import dbg
from yaml import dump as yaml_dump

REAL_FILE = os.path.abspath(__file__)
REAL_NAME = os.path.basename(REAL_FILE)
REAL_PATH = os.path.dirname(REAL_FILE)

if os.path.islink(__file__):
    LINK_FILE = REAL_FILE
    REAL_FILE = os.path.abspath(os.readlink(__file__))
    LINK_NAME = REAL_NAME
    REAL_NAME = os.path.basename(REAL_FILE)
    LINK_PATH = REAL_PATH
    REAL_PATH = os.path.dirname(REAL_FILE)

DIR = os.path.abspath(REAL_PATH + "/..")
CWD = os.path.abspath(os.getcwd())
REL = os.path.relpath(DIR, CWD)

STAGE_URL = "refractr.allizom.org"

ONLY = [
    "nginx",
    "simple",
    "redirect",
    "rewrite",
]

ONE = [
    "first",
    "last",
]

OUTPUT = [
    "json",
    "yaml",
]

sys.path.insert(0, DIR)

from refractr.cfg import CFG
from refractr.refractr import Refractr


def default_output():
    return OUTPUT[int(sys.stdout.isatty())]


def output_print(data, output_format, default_flow_style=False, explicit_start=False):
    if output_format == "yaml":
        print(
            yaml_dump(
                data,
                default_flow_style=default_flow_style,
                explicit_start=explicit_start,
            ).rstrip()
        )

    elif output_format == "json":
        print(json_dumps(data, indent=2))


def add_subparser(subparsers, action, **kwargs):
    parser = subparsers.add_parser(action, **kwargs)

    parser.add_argument(
        "-v", "--verbose", action="store_true", help="turn up verbosity"
    )

    parser.add_argument(
        "-n",
        "--nginx",
        dest="only",
        const="nginx",
        action="store_const",
        help="limit to only NginxRefract",
    )

    parser.add_argument(
        "-s",
        "--simple",
        dest="only",
        const="simple",
        action="store_const",
        help="limit to only SimpleRefract",
    )

    parser.add_argument(
        "-x",
        "--complex",
        dest="only",
        const="complex",
        action="store_const",
        help="limit to only ComplexRefract",
    )

    parser.add_argument(
        "-f",
        "--first",
        dest="count",
        const=1,
        action="store_const",
        help='shorthand for "-c|--count 1"',
    )

    parser.add_argument(
        "-l",
        "--last",
        dest="count",
        const=-1,
        action="store_const",
        help='shorthand for "-c|--count -1"',
    )

    parser.add_argument(
        "-c",
        "--count",
        metavar="INT",
        type=int,
        help="positive integer? N items from top; negative? N items from back",
    )

    parser.add_argument(
        "-a",
        "--all-sources",
        action="store_true",
        help="toggle search for all sources instead of just first",
    )

    parser.add_argument(
        "patterns",
        nargs="*",
        default=["*"],
        help='default="%(default)s"; patterns to limit refracts',
    )

    return parser


def main(args):
    main_parser = ArgumentParser(description=__doc__)

    main_parser.add_argument(
        "-c",
        "--config",
        metavar="CFG",
        default=CFG.REFRACTR_YML,
        help='default="%(default)s"; specify the config yaml to use',
    )

    main_parser.add_argument(
        "-o",
        "--output",
        metavar="OUPUT",
        default=default_output(),
        choices=OUTPUT,
        help='default="%(default)s"; set the output type; choices=[%(choices)s]',
    )

    subparsers = main_parser.add_subparsers(
        dest="action", title="action", help="actions"
    )

    show_parser = add_subparser(
        subparsers, "show", aliases=["sh"], help="show data transformed by loading"
    )

    domains_parser = add_subparser(
        subparsers, "domains", aliases=["do"], help="show domains in selected spec"
    )

    certificate_manager_input_parser = add_subparser(
        subparsers,
        "certificate_manager_input",
        aliases=["cmi"],
        help="print domains in certificate manager module compatible format",
    )

    nginx_parser = add_subparser(
        subparsers, "nginx", aliases=["ngx"], help="generate nginx"
    )

    ingress_parser = add_subparser(
        subparsers, "ingress", aliases=["ing"], help="generate ingress"
    )

    ingress_parser.add_argument(
        "-i",
        "--ingress-template",
        metavar="FILE",
        default=CFG.INGRESS_YAML_TEMPLATE,
        nargs="?",
        help='default="%(default)s"; path to ingress template',
    )

    validate_parser = add_subparser(
        subparsers,
        "validate",
        aliases=["val"],
        help="validate refracts <public|localhost|stage>",
    )

    validate_parser.add_argument(
        "-N",
        "--netloc",
        help='default="public"; select netloc to use <localhost|stage>',
    )

    validate_parser.add_argument(
        "-L",
        "--localhost",
        dest="netloc",
        const="localhost",
        action="store_const",
        help='shorthand for "-n|--netloc localhost"',
    )

    validate_parser.add_argument(
        "-S",
        "--stage",
        dest="netloc",
        const=STAGE_URL,
        action="store_const",
        help='shorthand for "-n|--netloc refractr.allizom.org"',
    )

    validate_parser.add_argument(
        "-e", "--early", action="store_true", help="toggle early exit"
    )

    parsed = main_parser.parse_args(args)
    refractr = Refractr(**parsed.__dict__)

    if parsed.action in ("sh", "show"):
        output = refractr.show(
            parsed.patterns, parsed.only, parsed.count, parsed.all_sources
        )

        output_print(output, parsed.output)

    elif parsed.action in ("do", "domains"):
        domains = refractr.domains(
            parsed.patterns, parsed.only, parsed.count, parsed.all_sources
        )

        output_print(domains, parsed.output)

    elif parsed.action in ("certificate_manager_input", "cmi"):
        domains = refractr.domains(
            parsed.patterns, parsed.only, parsed.count, parsed.all_sources
        )

        morph = {}

        for domain in domains["domains"]:
            is_wildcard = False
            primary_domain = domain

            if domain.startswith("*"):
                is_wildcard = True
                primary_domain = ".".join(domain.split(".")[1:])

            if primary_domain not in morph:
                morph[primary_domain] = {}

            if "hostname" not in morph[primary_domain]:
                morph[primary_domain]["hostname"] = primary_domain

            if is_wildcard:
                if "additional_domains" not in morph[primary_domain]:
                    morph[primary_domain]["additional_domains"] = []

                morph[primary_domain]["additional_domains"].append(domain)

                if "dns_authorization" not in morph[primary_domain]:
                    morph[primary_domain]["dns_authorization"] = True

        output_print(
            [morph[key] for key in sorted(morph)],
            parsed.output,
            default_flow_style=False,
            explicit_start=True,
        )

    elif parsed.action in ("ngx", "nginx"):
        output = refractr.render(
            parsed.patterns, parsed.only, parsed.count, parsed.all_sources
        )

        print(output)

    elif parsed.action in ("ing", "ingress"):
        domains = refractr.domains(
            parsed.patterns, parsed.only, parsed.count, parsed.all_sources
        )

        env = Environment(
            loader=FileSystemLoader(os.path.dirname(parsed.ingress_template)),
            trim_blocks=True,
            lstrip_blocks=True,
        )

        template = env.get_template(os.path.basename(parsed.ingress_template))
        ingress = template.render(domains)

        print(ingress)

    elif parsed.action in ("val", "validate"):
        validated = refractr.validate(
            parsed.patterns, parsed.only, parsed.count, parsed.all_sources
        )

        output_print(validated, parsed.output)


if __name__ == "__main__":
    main(sys.argv[1:])
