#!/usr/bin/env python3

import os
import re
import sys
sys.dont_write_bytecode = True

REAL_FILE = os.path.abspath(__file__)
REAL_NAME = os.path.basename(REAL_FILE)
REAL_PATH = os.path.dirname(REAL_FILE)
if os.path.islink(__file__):
    LINK_FILE = REAL_FILE; REAL_FILE = os.path.abspath(os.readlink(__file__))
    LINK_NAME = REAL_NAME; REAL_NAME = os.path.basename(REAL_FILE)
    LINK_PATH = REAL_PATH; REAL_PATH = os.path.dirname(REAL_FILE)

DIR = os.path.abspath(REAL_PATH)
CWD = os.path.abspath(os.getcwd())
REL = os.path.relpath(DIR, CWD)
NAME, EXT = os.path.splitext(REAL_NAME)

VIEWS = [
    'Public',
    'Private',
    'Both',
]

from ruamel import yaml
from tld import get_fld
from subprocess import Popen, PIPE, CalledProcessError
from argparse import ArgumentParser, RawDescriptionHelpFormatter

from leatherman.dbg import dbg

class BloxtoolRequiredError(Exception):
    def __init__(self, bloxtool):
        msg = f'bloxtool binary is required; bloxtool={bloxtool}'
        super().__init__(msg)

class BloxtoolDeleteError(Exception):
    def __init__(self, result):
        msg = f'bloxtool delete error; result={result}'
        super().__init__(msg)

class BloxtoolCreateError(Exception):
    def __init__(self, result):
        msg = f'bloxtool create error; result={result}'
        super().__init__(msg)

def call(
    cmd,
    stdout=PIPE,
    stderr=PIPE,
    shell=True,
    nerf=False,
    throw=True,
    verbose=False):

    if nerf:
        return (None, 'nerfed', 'nerfed')
    process = Popen(cmd, stdout=stdout, stderr=stderr, shell=shell)  # nosec
    _stdout, _stderr = [
        stream.decode('utf-8') if stream is not None else None
        for stream in process.communicate()
    ]
    exitcode = process.poll()
    if throw and exitcode:
        raise CalledProcessError(
            exitcode,
            f'cmd={cmd}; stdout={_stdout}; stderr={_stderr}',
            output=_stdout,
            stderr=_stderr,
        )
    return exitcode, _stdout, _stderr

class Flipper():
    def __init__(self, bloxtool, domain, ips, target, view, verbose=False, **kwargs):
        if not os.path.isfile(bloxtool):
            raise BloxtoolRequiredError(bloxtool)
        self.bloxtool = bloxtool
        self.domain = domain
        self.ips = ips
        self.target = target
        self.views = ['Public', 'Private'] if view == 'Both' else [view]
        self.verbose = verbose

    def exists(self, record, view):
        result = self.bt(f'record:{record} get {self.domain} {view}')
        if result:
            return not 'not found' in result
        return False

    def delete(self, record, view):
        result = self.bt(f'record:{record} delete {self.domain} {view}')
        if result:
            if not 'Success:' in result:
                raise BloxtoolCreateError(result)
            return True
        raise BloxtoolCreateError(result)

    def create(self, record, target, view):
        result = self.bt(f'record:{record} create {self.domain} {target} {view}')
        if result:
            if not 'Success:' in result:
                raise BloxtoolDeleteError(result)
            return [True]
        raise BloxtoolDeleteError(result)

    def bt(self, args, strip=True, **kwargs):
        try:
            _, result, _ = call(f'{self.bloxtool} {args}', verbose=self.verbose, **kwargs)
            if result and strip:
                result = result.strip()
            return result
        except CalledProcessError as ex:
            raise ex

    @property
    def tld(self):
        return get_fld(f'https://{self.domain}')

    @property
    def is_apex(self):
        return self.tld == self.domain

    def flip(self, domain):
        results = []
        for view in self.views:
            if self.is_apex:
                # check for HOST records in addtion to A records
                if self.exists('host', view):
                    self.delete('host', view)
                if self.exists('a', view):
                    self.delete('a', view)
                for ip in self.ips:
                    results += self.create('a', ip, view)
            else:
                if self.exists('cname', view):
                    self.delete('cname', view)
                result += self.create('cname', self.target, view)
        return all(results)

def main(args=None):
    status, stdout, stderr = call('which bloxtool')
    bloxtool_default = stdout.strip() if status == 0 else None
    parser = ArgumentParser(
        description=__doc__,
        formatter_class=RawDescriptionHelpFormatter,
        add_help=False)
    parser.add_argument(
        '--config',
        metavar='FILEPATH',
        default=f'{REL}/flip-dns.yml',
        help='default="%(default)s"; config filepath')
    ns, rem = parser.parse_known_args(args)
    try:
        config = yaml.safe_load(open(ns.config))
    except FileNotFoundError as er:
        config = dict()
    parser = ArgumentParser(
        parents=[parser])
    parser.set_defaults(**config)
    parser.add_argument(
        '-b', '--bloxtool',
        default=bloxtool_default,
        help='default="%(default)s"; path to the bloxtool binary')
    parser.add_argument(
        '-i', '--ips',
        nargs='+',
        help='default="%(default)s"; ips to be used for A records for apex domains')
    parser.add_argument(
        '-t', '--target',
        help='default="%(default)s"; target to be used for CNAME record for non-apex domains')
    parser.add_argument(
        '-v', '--view',
        default=VIEWS[-1],
        choices=VIEWS,
        help='default="%(default)s"; view to be used')
    parser.add_argument(
        '-V',  '--verbose',
        action='store_true',
        help='toggle verbose output')
    parser.add_argument(
        'domain',
        help='domain name')
    ns = parser.parse_args(rem)
    flipper = Flipper(**ns.__dict__)
    result = flipper.flip(ns.domain)
    if result:
        print('FLIPPED!')
    else:
        print('FLOPPED!')

if __name__ == '__main__':
    main(sys.argv[1:])

